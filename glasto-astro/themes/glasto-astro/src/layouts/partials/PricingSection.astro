---
import ImageMod from "@/components/ImageMod.astro";
import { markdownify } from "@/lib/utils/textConverter";
import type { Button } from "@/types";
import { getEntry } from "astro:content";

interface Pricing {
  title: string;
  description: string;
  savings: string;
  bg_gradient_image: string;
  plans_labels: string[];
  plans: {
    title: string;
    description: string;
    price_prefix: string;
    price_monthly: string;
    price_yearly: string;
    price_description_monthly: string;
    price_description_yearly: string;
    features: string[];
    badge: {
      enable: boolean;
      label: string;
    };
    button: Button;
  }[];
}

interface Props {
  content?: Pricing;
  largeHeading?: boolean;
}

const { largeHeading, content } = Astro.props;

let {
  title,
  description,
  bg_gradient_image,
  plans,
  plans_labels,
  savings,
}: Pricing = (await getEntry("sections", "pricing")).data;

// Override default blog data (Title & Description) with props if provided
if (content) {
  ({ title, description } = content);
}
---

{
  (
    <section class="section relative overflow-hidden">
      <div class="container">
        <div
          aria-hidden="true"
          class="blur-[100px] h-[1004px] left-1/2 -translate-x-1/2 opacity-90 absolute w-full z-0 top-[30%]">
          <ImageMod
            class="w-full object-cover object-center h-full"
            src={bg_gradient_image}
            alt="gradient background"
          />
        </div>
        <div class="row">
          <div
            class="mx-auto text-center lg:col-8 xl:col-7"
            data-aos="fade-up-sm">
            {title &&
              (largeHeading ? (
                <h1
                  class="mb-6 [&>strong]:text-primary"
                  set:html={markdownify(title)}
                />
              ) : (
                <h2
                  class="mb-6 [&>strong]:text-primary"
                  set:html={markdownify(title)}
                />
              ))}
            {description && (
              <p class="text-lg/inherit" set:html={markdownify(description)} />
            )}
          </div>
          <div class="col-12 pt-20">
            <div class="row gx-4">
              <div
                class="col-12 pb-10"
                data-aos="fade-up-sm"
                data-aos-delay="200">
                <div class="flex items-center justify-center gap-x-3">
                  {plans_labels.map((plan, index) => (
                    <span
                      class={`select-none font-medium ${index === 0 ? "order-0" : "order-3"}`}
                      set:html={markdownify(plan)}
                    />
                  ))}
                  <label class="relative inline-block h-8 w-16 cursor-pointer order-1 rounded-full bg-white border border-border">
                    <span class="sr-only">Pricing Switcher</span>
                    <input
                      type="checkbox"
                      id="checkbox"
                      class="pricing-check peer w-full cursor-pointer opacity-0"
                    />
                    <span class="absolute left-0 -top-px cursor-pointer before:absolute before:left-1 before:top-1 before:h-6 before:w-6 before:translate-x-0 before:rounded-full before:bg-green-500 before:transition-all before:delay-75 before:duration-300 peer-checked:before:translate-x-8" />
                  </label>
                  <span
                    class="order-3 text-white bg-primary px-2.5 text-sm py-1 rounded-full"
                    set:html={markdownify(savings)}
                  />
                </div>
              </div>

              <div class="col-12">
                <div class="row gy-4">
                  {plans?.map((item, index) => (
                    <div
                      class="lg:col-4"
                      data-aos="fade-up-sm"
                      data-aos-delay={200 + index * 150}>
                      <div
                        class={`bg-white drop-shadow-2xl shadow-dark/5 group mb-12 flex flex-col items-start md:gap-14 gap-7 min-h-full rounded-xl p-8 last:mb-0`}>
                        <div class="flex flex-col gap-6">
                          <div class="flex flex-wrap items-center justify-between w-full gap-4">
                            {item.title && (
                              <h3 class="counter text-lg font-semibold">
                                <span>{markdownify(item.title)}</span>
                              </h3>
                            )}
                            {item.badge?.enable && (
                              <span
                                class="rounded-full text-sm bg-gradient-[270deg] text-white from-teal-400 to-violet-500 px-3 py-1 font-medium"
                                set:html={markdownify(item.badge.label)}
                              />
                            )}
                          </div>
                          <div class="flex flex-col gap-2 sm:flex-row sm:items-center">
                            {item.price_monthly && item.price_yearly && (
                              <strong class="h2">
                                {item.price_prefix}
                                <span
                                  class="data-count"
                                  data-count-yearly={item.price_yearly}
                                  data-count-monthly={item.price_monthly}
                                  set:html={markdownify(item.price_monthly)}
                                />
                                <span>/</span>
                              </strong>
                            )}
                            {item.price_description_monthly &&
                              item.price_description_yearly && (
                                <>
                                  <span
                                    class="mt-6 capitalize text-sm text-monthly"
                                    set:html={markdownify(
                                      item.price_description_monthly,
                                    )}
                                  />
                                  <span
                                    class="mt-6 capitalize text-sm text-yearly hidden"
                                    set:html={markdownify(
                                      item.price_description_yearly,
                                    )}
                                  />
                                </>
                              )}
                          </div>
                          {item.description && (
                            <p set:html={markdownify(item.description)} />
                          )}
                          {item.features && (
                            <ul class="mt-2">
                              {item.features.map((feature) => (
                                <li class="mb-2">
                                  <img
                                    class="w-6 inline-block me-2"
                                    src="/images/icons/svg/check-narrow.svg"
                                    alt="check"
                                  />
                                  <span set:html={markdownify(feature)} />
                                </li>
                              ))}
                            </ul>
                          )}
                        </div>

                        {item.button && item.button.enable && (
                          <a
                            class="btn btn-primary hover-dark text-center w-full mt-auto"
                            href={item.button.link}>
                            {item.button.label}
                          </a>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

<script>
  function pricingInit() {
    // Select the toggle switch element
    const toggleSwitch =
      document.querySelector<HTMLInputElement>(".pricing-check");
    const numbers = document.querySelectorAll<HTMLDivElement>(".data-count");
    toggleSwitch &&
      toggleSwitch.addEventListener("change", function () {
        if (toggleSwitch.checked) {
          numbers.forEach(function (number) {
            const yearlyCount = number.getAttribute("data-count-yearly");
            if (yearlyCount) {
              number.innerHTML = yearlyCount;
              animateCounter(number, parseInt(yearlyCount, 10));
            }
          });
          toggleVisibility(".text-yearly", "d-block", "hidden");
          toggleVisibility(".text-monthly", "hidden", "d-block");
        } else {
          numbers.forEach(function (number) {
            const monthlyCount = number.getAttribute("data-count-monthly");
            if (monthlyCount) {
              number.innerHTML = monthlyCount;
              animateCounter(number, parseInt(monthlyCount, 10));
            }
          });
          toggleVisibility(".text-monthly", "d-block", "hidden");
          toggleVisibility(".text-yearly", "hidden", "d-block");
        }
      });

    function animateCounter(element: HTMLElement, endValue: number) {
      let startValue = 0;
      const duration = 250;
      let startTime: number | null = null;

      function step(currentTime: number) {
        if (!startTime) startTime = currentTime;
        const progress = currentTime - startTime;
        const value =
          Math.min(progress / duration, 1) * (endValue - startValue) +
          startValue;
        element.innerHTML = Math.ceil(value).toString();
        if (progress < duration) {
          requestAnimationFrame(step);
        }
      }

      requestAnimationFrame(step);
    }

    function toggleVisibility(
      selector: string,
      addClass: string,
      removeClass: string,
    ) {
      const elements = document.querySelectorAll<HTMLElement>(selector);
      elements.forEach(function (element) {
        element.classList.add(addClass);
        element.classList.remove(removeClass);
      });
    }
  }
  document.addEventListener("astro:page-load", pricingInit);
</script>
