---
import ImageMod from "@/components/ImageMod.astro";
import { markdownify } from "@/lib/utils/textConverter";
import type { Button } from "@/types";
import { getEntry } from "astro:content";

interface Integration {
  title: string;
  description: string;
  bg_gradient_image: string;
  list: {
    name: string;
    image: string;
    description: string;
    list: string[];
    button: Button;
  }[];
}

const { title, bg_gradient_image, description, list }: Integration = (
  await getEntry("sections", "integration")
).data;
---

{
  (
    <section class="section relative">
      <div class="container">
        <div
          aria-hidden="true"
          class="blur-[100px] h-[1004px] left-1/2 -translate-x-1/2 absolute w-full z-0 bottom-0">
          <ImageMod
            class="w-full object-cover object-center h-full"
            src={bg_gradient_image}
            alt="gradient background"
          />
        </div>
        <div class="row">
          <div
            class="mx-auto text-center lg:col-8 xl:col-7"
            data-aos="fade-up-sm">
            {title && (
              <h1
                class="mb-6 [&>strong]:text-primary"
                set:html={markdownify(title)}
              />
            )}
            {description && (
              <p class="text-lg/inherit" set:html={markdownify(description)} />
            )}
          </div>
          <div class="col-12 pt-20" data-aos="fade-up-sm" data-aos-delay={200}>
            <div class="row g-5 justify-center">
              {list?.map((item) => (
                <div class="md:col-6 lg:col-4">
                  <div class="group relative min-h-full rounded-lg bg-white px-10 py-12 transition duration-300 hover:-translate-y-1 shadow">
                    {item.image && (
                      <ImageMod
                        class="mb-10 h-14 object-contain"
                        src={item.image}
                        alt={`${item.name}`}
                      />
                    )}
                    {item.name && (
                      <h3 class="h5 mb-2" set:html={markdownify(item.name)} />
                    )}
                    {item.description && (
                      <p
                        class="opacity-70"
                        set:html={markdownify(item.description)}
                      />
                    )}
                    {item.list && (
                      <ul class="mt-4 flex flex-wrap gap-2">
                        {item.list.map((listItem) => (
                          <li
                            class="rounded-md bg-dark/10 px-4 py-1"
                            set:html={markdownify(listItem)}
                          />
                        ))}
                      </ul>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}
