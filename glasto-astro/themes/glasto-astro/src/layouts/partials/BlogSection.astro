---
import BlogCard from "@/components/BlogCard.astro";
import Pagination from "@/components/Pagination.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { sortByDate } from "@/lib/utils/sortFunctions";
import { markdownify } from "@/lib/utils/textConverter";
import type { Button } from "@/types";
import { getEntry } from "astro:content";
import config from "@/config/config.json";

// Define the structure of a blog post
interface Blog {
  title: string;
  button?: Button;
  description?: string;
}

// Define the props for this component
interface Props {
  content?: Blog; // Optional blog data passed as props
  visiblePosts?: number; // Number of posts to display
  isBlogPage?: boolean; // Number of posts to display
  isBlogSingelPage?: boolean; // Number of posts to display
  posts?: any[]; // Number of posts to display
  slug?: string; // Number of posts to display
}

const isHomePage = Astro.url.pathname === "/";
let { content, isBlogPage, isBlogSingelPage, slug, visiblePosts, posts } =
  Astro.props;

// Get default blog data from the "sections" content collection
let { title, description, button }: Blog = (await getEntry("blog", "-index"))
  .data;

// Override default blog data (Title & Description) with props if provided
if (content) {
  ({ title, description, button } = content);
}

// Constant for blog folder path
const BLOG_FOLDER = "blog";

// Get all blog posts from the specified folder if no posts are passed as props
posts = posts ? posts : await getSinglePage(BLOG_FOLDER);

// Sort blog posts by date in descending order
let sortedPosts = sortByDate(posts);

// Limit the number of posts to display if specified
visiblePosts && (sortedPosts = sortedPosts.slice(0, visiblePosts));

const totalPages = Math.ceil(posts.length / config.settings.pagination);
const currentPage = slug && !isNaN(Number(slug)) ? Number(slug) : 1;
const indexOfLastPost = currentPage * config.settings.pagination;
const indexOfFirstPost = indexOfLastPost - config.settings.pagination;

// Show posts based on pagination
sortedPosts =
  currentPage === 1
    ? sortedPosts.slice(0, config.settings.pagination)
    : sortedPosts.slice(indexOfFirstPost, indexOfLastPost);
---

{
  (
    <section class="section overflow-hidden">
      <div class="container">
        <div class="row">
          {!isBlogSingelPage && (
            <div
              class={`col-12 pb-20 ${isBlogPage ? "xl:col-6 mx-auto text-center" : "col-12"}`}
              data-aos="fade-up-sm">
              <div
                class={`flex gap-5 flex-wrap items-center ${isBlogPage ? "justify-center" : "justify-between"}`}>
                {title &&
                  (isBlogPage ? (
                    <h1
                      class="text-h2 md:text-h1"
                      set:html={markdownify(title)}
                    />
                  ) : (
                    <h2 set:html={markdownify(title)} />
                  ))}
                {!isHomePage && description && (
                  <p
                    class="text-lg/inherit"
                    set:html={markdownify(description)}
                  />
                )}
                {!isBlogPage && button && button.enable && (
                  <a
                    class="btn btn-outline-dark"
                    href={button.link}
                    target={button.link.startsWith("http") ? "_blank" : "_self"}
                    set:html={markdownify(button.label)}
                  />
                )}
              </div>
            </div>
          )}
          <div class="col-12" data-aos="fade-up-sm" data-aos-delay="200">
            <div class="row gx-4 gy-5 justify-center md:gx-5">
              {sortedPosts?.map((blog) => (
                <div class={`md:col-6 lg:col-4`}>
                  {blog && <BlogCard content={blog} />}
                </div>
              ))}
            </div>
          </div>
          {isBlogPage && (
            <div class="col-12">
              <Pagination
                section={BLOG_FOLDER}
                currentPage={currentPage}
                totalPages={totalPages}
              />
            </div>
          )}
        </div>
      </div>
    </section>
  )
}
