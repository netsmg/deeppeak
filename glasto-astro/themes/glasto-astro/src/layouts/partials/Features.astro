---
import ImageMod from "@/components/ImageMod.astro";
import { markdownify, plainify } from "@/lib/utils/textConverter";
import { getEntry } from "astro:content";

interface ListGridItem {
  title: string;
  description?: string;
  images: string[];
  list?: {
    title: string;
    images: string[];
  }[];
}

interface ListColumnItem {
  title: string;
  images: string[];
  description: string;
  list?: {
    icon: string;
    title: string;
    description: string;
  }[];
  list_check?: string[];
}

let {
  title,
  description,
  list_grid,
  list_columns,
}: {
  title: string;
  description: string;
  list_grid: ListGridItem[];
  list_columns: ListColumnItem[];
} = (await getEntry("sections", "features")).data;
---

{
  (
    <section class="section">
      <div class="container">
        <div class="row">
          <div
            class="mx-auto text-center lg:col-10 xl:col-6"
            data-aos="fade-up-sm">
            {title && <h2 class="mb-6" set:html={markdownify(title)} />}
            {description && (
              <p class="text-lg/inherit" set:html={markdownify(description)} />
            )}
          </div>
          <div class="col-12 pt-20">
            <div class="row g-4">
              {list_grid?.map((item, gridIndex) => {
                return item.list ? (
                  <div
                    class="lg:col-4 lg:order-none -order-1"
                    data-aos="fade-up-sm"
                    data-aos-delay={gridIndex * 150}>
                    <div class="flex flex-col md:flex-row lg:flex-col min-h-full gap-6 group">
                      {item.list.map((item, listIndex) => (
                        <div
                          class={`px-6 md:px-11 py-16 md:py-20 lg:py-0 text-center relative overflow-hidden flex flex-col rounded-md h-full flex-1 justify-center group/item ${listIndex === 0 ? "bg-green-100" : "bg-lime-100"}`}>
                          {item.title && (
                            <h3 class="h4" set:html={markdownify(item.title)} />
                          )}

                          {item.images && (
                            <div
                              class={`${listIndex === 0 ? "group-hover/item:md:opacity-40 flex justify-between pointer-events-none absolute xl:w-[150%] md:w-[180%] w-[140%] opacity-10 md:opacity-20 left-1/2 -translate-x-1/2 inset-x-0" : "group-hover/item:top-[calc(100%_-_1.8rem)] absolute left-1/2 -translate-x-1/2 top-[calc(100%_-_2.5rem)]"} transition-all duration-300`}>
                              {item.images.map((image: string, imageIndex) => (
                                <img
                                  class={
                                    "rotating-animation transition-transform duration-500 " +
                                    (listIndex === 0
                                      ? imageIndex === 0
                                        ? "lg:group-hover/item:rotate-[20deg]"
                                        : "lg:group-hover/item:rotate-[20deg]"
                                      : "lg:group-hover/item:translate-y-5")
                                  }
                                  src={image}
                                  alt={item.title}
                                />
                              ))}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                ) : (
                  <div
                    class="md:col-6 lg:col-4"
                    data-aos="fade-up-sm"
                    data-aos-delay={gridIndex * 150}>
                    <div
                      class={`flex rounded-md group flex-col min-h-full justify-start bg-violet-200 p-6 gap-y-10`}>
                      <div>
                        {item.title && (
                          <h3
                            class="h6 mb-4"
                            set:html={markdownify(item.title)}
                          />
                        )}
                        {item.description && (
                          <p set:html={markdownify(item.description)} />
                        )}
                      </div>

                      {item.images && (
                        <div
                          class={`${(gridIndex + 1) % 3 === 0 ? "flex justify-between -order-1" : "duration-300 transition-transform group-hover:scale-95"} py-4 md:py-8 px-6 md:px-12 bg-white/20 rounded-lg`}>
                          {item.images.map((image: string, imageIndex) => (
                            <ImageMod
                              class={`rounded-md duration-300 transition-all ${(gridIndex + 1) % 3 === 0 ? (imageIndex === 0 ? "group-hover:translate-y-2" : "group-hover:-translate-y-2") + " w-[calc(50%_-_0.75rem)]" : "group-hover:scale-110"}`}
                              src={image}
                              alt={`image related to ${item.title}`}
                            />
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
            <div class="flex flex-col gap-y-16 lg:gap-y-32 pt-16 lg:pt-32">
              {list_columns?.map((item, index) => (
                <div
                  class={`row gx-0 gy-5 items-center ${index % 2 !== 0 ? "" : ""}`}>
                  <div
                    class={`${index % 2 === 0 ? "lg:pe-16" : "md:order-2 lg:ps-16"} lg:col-6`}
                    data-aos="fade-up-sm"
                    data-aos-delay={100}>
                    <div
                      class={` ${index % 2 === 0 ? "bg-theme-light" : "bg-primary/10"} overflow-hidden flex flex-col gap-8 rounded-2xl p-8 pb-0`}>
                      {item.images &&
                        item.images.map((image: string, imageIndex: number) => (
                          <ImageMod
                            class={`${index % 2 === 0 ? "drop-shadow-xl" : ""} rounded-t-sm ${imageIndex === 1 ? "h-[260px] object-cover object-top" : ""}`}
                            src={image}
                            alt={`image related to ${plainify(item.title)}`}
                          />
                        ))}
                    </div>
                  </div>
                  <div
                    class={`${index % 2 === 0 ? "xl:ps-8" : "xl:pe-20"} lg:col-6`}
                    data-aos="fade-up-sm"
                    data-aos-delay={300}>
                    {item.title && (
                      <h3
                        class="h2 mb-6 has-highlight-text"
                        set:html={markdownify(item.title)}
                      />
                    )}
                    {item.description && (
                      <p
                        class="text-lg/inherit"
                        set:html={markdownify(item.description)}
                      />
                    )}

                    {item.list && (
                      <div class="mt-10 flex flex-col gap-10 sm:flex-row xl:mt-20 border-t border-border pt-8">
                        {item.list.map((point) => (
                          <div class="flex flex-col xl:flex-row gap-5">
                            {point.icon && (
                              <div class="flex h-12 min-w-12 w-12 items-center justify-center rounded-full bg-green-500">
                                <ImageMod
                                  class="h-6 w-6 object-cover"
                                  src={point.icon}
                                  alt={`icon related to ${point.title}`}
                                />
                              </div>
                            )}
                            <div>
                              {point.title && (
                                <h3
                                  class="h6 mb-2"
                                  set:html={markdownify(point.title)}
                                />
                              )}
                              {point.description && (
                                <p set:html={markdownify(point.description)} />
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                    {item.list_check && (
                      <ul class="columns-2 mt-10 lg:mt-20 border-t gap-x-5 border-t-border pt-8">
                        {item.list_check.map((point: string) => (
                          <li class="text-lg font-medium flex gap-2 first:mt-0 mt-6">
                            <ImageMod
                              class="h-6 w-6 object-cover"
                              src="/images/icons/svg/check-green.svg"
                              alt="icon"
                            />
                            {point}
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}
